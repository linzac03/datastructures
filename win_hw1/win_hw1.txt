4.19) Insert 2, 1, 4, 5, 9, 3, 6, 7 int AVL tree

            4
          /  \
         2    6
        / \  / \
       1   3 5  9
               /
              7


4.26) write the function for double rotation without the inefficiency of doing two single rotations

    k1-9
   / \
  k2-7
 / \
    k3 - 8
   / \

   for a left-right roation you do a right rotation on the subtree then a left rotation on the root you're
       working with

       //they dont adjust height

    left_right_rotation(AvlNode* & root){
        AvlNode* k2 = root->left; 7
        AvlNode* k3 = k2->right; 8
        root->left = k3->right; null
        k2->right = k3->left; null
        k3->right = root; 9
        k3->left = k2; 7
    }


    right_left_rotation(AvlNode* & root){
        AvlNode* k2 = root->right;
        AvlNode* k3 = k2->left;
        root->right = k3->left;
        k2->left = k3->right;
        k3->left = root;
        k3->right = k2;
    }

4.27) show the tree after accessing keys 3 9 1 5

                    10
                  /    \
                 4      11
               /    \     \
             2       6     12
           /   \    / \      \
          1     3  5   8      13
                      / \
                     7   9


                3                         accessing 3  - two rotations
               /  \
              2    10
             /    /  \
            1    4   11
                 \     \
                 6      12
                / \      \
               5  8       13
                 / \
                7   9

                                         accessing 9 - 3 rotations
                10
                / \
               4   11
                \   \
                 9  12
                /     \
               8      13
              /
             6
            / \
           5   7


4.31) write functions using just the pointer to the root that
    a) get the number of nodes in T
    b) the number of leaves in T
    c) the number of full nodes in T

    a)
    int total_nodes(BNode* & node){
        if(node){
            return (1 + total_nodes(node->left) + total_nodes(node->right));
        }else{
            return 0;
        }
    }

    int total_leaves(Bnodes* & node){
        if(node){
            if(node->left && node->right){
                return (total_leaves(node->left) + total_leaves(node->right));
            }else if(node->left){
                return total_leaves(node->left);
            }else if(node->right){
                return total_leaves(node->right);
            }else{
                return 1;
            }
        }
    }

    int total_full_nodes(BNode* & node){
        if(node){
            if(node->right && node->left){
                return (1 + total_full_nodes(node->left) + total_full_nodes(node->right));
            }else if(node->left){
                return total_full_nodes(node->left);
            }else if(node->right){
                return total_full_nodes(node->right);
            }else{
                return 0;
            }
        }
    }


